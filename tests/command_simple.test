package require tcltest
package require valkey

namespace import -force ::tcltest::test

::tcltest::configure {*}$argv

source [file join [file dirname [info script]] common.tcl]

valkey_fake_server up

# commands with fixed number of arguments

# single word command: GET, requires 1 argument

test valkeyCommandSimple-1.1.1 { Test GET without arguments } -body {
    set vkh [valkey -host 127.0.0.1 -port $::vk_port]
    $vkh GET
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh
} -returnCodes error -result {GET command requires exactly 1 argument, but no arguments were given}

test valkeyCommandSimple-1.1.2 { Test GET wrong # args } -body {
    set vkh [valkey -host 127.0.0.1 -port $::vk_port]
    $vkh GET a b c
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh
} -returnCodes error -result {GET command requires exactly 1 argument, but 3 arguments were given}

# double words command: CLIENT CACHING, requires 2 argument

test valkeyCommandSimple-1.2.1 { Test CLIENT CACHING without arguments } -body {
    set vkh [valkey -host 127.0.0.1 -port $::vk_port]
    $vkh CLIENT CACHING
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh
} -returnCodes error -result {CLIENT CACHING command requires exactly 2 arguments, but no arguments were given}

test valkeyCommandSimple-1.2.2 { Test CLIENT CACHING wrong # args, less than needed } -body {
    set vkh [valkey -host 127.0.0.1 -port $::vk_port]
    $vkh CLIENT CACHING 1
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh
} -returnCodes error -result {CLIENT CACHING command requires exactly 2 arguments, but only 1 argument was given}

test valkeyCommandSimple-1.2.3 { Test CLIENT CACHING wrong # args, more than needed } -body {
    set vkh [valkey -host 127.0.0.1 -port $::vk_port]
    $vkh CLIENT CACHING 1 2 3
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh
} -returnCodes error -result {CLIENT CACHING command requires exactly 2 arguments, but 3 arguments were given}

# command with a certain minimum number of arguments

# single word command: BITCOUNT, requires at least 1 argument

test valkeyCommandSimple-2.1.1 { Test BITCOUNT wrong # args } -body {
    set vkh [valkey -host 127.0.0.1 -port $::vk_port]
    $vkh BITCOUNT
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh
} -returnCodes error -result {BITCOUNT command requires a minimum of 1 arguments, but no arguments were given}

# single word command: BITOP, requires at least 3 arguments

test valkeyCommandSimple-2.2.1 { Test BITOP wrong # args } -body {
    set vkh [valkey -host 127.0.0.1 -port $::vk_port]
    $vkh BITOP 1
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh
} -returnCodes error -result {BITOP command requires a minimum of 3 arguments, but only 1 argument was given}

# dounble word command: CLIENT LIST, requires at least 1 argument

test valkeyCommandSimple-3.1.1 { Test CLIENT LIST wrong # args } -body {
    set vkh [valkey -host 127.0.0.1 -port $::vk_port]
    $vkh CLIENT LIST
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh
} -returnCodes error -result {CLIENT LIST command requires a minimum of 1 arguments, but no arguments were given}

# single word command: CLIENT KILL, requires at least 2 arguments

test valkeyCommandSimple-3.2.1 { Test BITOP wrong # args } -body {
    set vkh [valkey -host 127.0.0.1 -port $::vk_port]
    $vkh CLIENT KILL 1
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh
} -returnCodes error -result {CLIENT KILL command requires a minimum of 2 arguments, but only 1 argument was given}

test valkeyCommandSimple-4.1 { Test unknown command } -body {
    set vkh [valkey -host 127.0.0.1 -port $::vk_port]
    $vkh foo
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh
} -returnCodes error -result {bad command "foo": must be raw, configure, destroy, ACL, APPEND, ASKING, AUTH, BGREWRITEAOF, BGSAVE, BITCOUNT, BITFIELD, BITFIELD_RO, BITOP, BITPOS, BLMOVE, BLMPOP, BLPOP, BRPOP, BRPOPLPUSH, BZMPOP, BZPOPMAX, BZPOPMIN, CLIENT, CLUSTER, COMMAND, CONFIG, COPY, DBSIZE, DEBUG, DECR, DECRBY, DEL, DISCARD, DUMP, ECHO, EVAL, EVALSHA, EVALSHA_RO, EVAL_RO, EXEC, EXISTS, EXPIRE, EXPIREAT, EXPIRETIME, FAILOVER, FCALL, FCALL_RO, FLUSHALL, FLUSHDB, FUNCTION, GEOADD, GEODIST, GEOHASH, GEOPOS, GEORADIUS, GEORADIUSBYMEMBER, GEORADIUSBYMEMBER_RO, GEORADIUS_RO, GEOSEARCH, GEOSEARCHSTORE, GET, GETBIT, GETDEL, GETEX, GETRANGE, GETSET, HDEL, HELLO, HEXISTS, HGET, HGETALL, HINCRBY, HINCRBYFLOAT, HKEYS, HLEN, HMGET, HMSET, HRANDFIELD, HSCAN, HSET, HSETNX, HSTRLEN, HVALS, INCR, INCRBY, INCRBYFLOAT, INFO, KEYS, LASTSAVE, LATENCY, LCS, LINDEX, LINSERT, LLEN, LMOVE, LMPOP, LOLWUT, LPOP, LPOS, LPUSH, LPUSHX, LRANGE, LREM, LSET, LTRIM, MEMORY, MGET, MIGRATE, MODULE, MONITOR, MOVE, MSET, MSETNX, MULTI, OBJECT, PERSIST, PEXPIRE, PEXPIREAT, PEXPIRETIME, PFADD, PFCOUNT, PFDEBUG, PFMERGE, PFSELFTEST, PING, PSETEX, PSUBSCRIBE, PSYNC, PTTL, PUBLISH, PUBSUB, PUNSUBSCRIBE, QUIT, RANDOMKEY, READONLY, READWRITE, RENAME, RENAMENX, REPLCONF, REPLICAOF, RESET, RESTORE, RESTORE-ASKING, ROLE, RPOP, RPOPLPUSH, RPUSH, RPUSHX, SADD, SAVE, SCAN, SCARD, SCRIPT, SDIFF, SDIFFSTORE, SELECT, SENTINEL, SET, SETBIT, SETEX, SETNX, SETRANGE, SHUTDOWN, SINTER, SINTERCARD, SINTERSTORE, SISMEMBER, SLAVEOF, SLOWLOG, SMEMBERS, SMISMEMBER, SMOVE, SORT, SORT_RO, SPOP, SPUBLISH, SRANDMEMBER, SREM, SSCAN, SSUBSCRIBE, STRLEN, SUBSCRIBE, SUBSTR, SUNION, SUNIONSTORE, SUNSUBSCRIBE, SWAPDB, SYNC, TIME, TOUCH, TTL, TYPE, UNLINK, UNSUBSCRIBE, UNWATCH, WAIT, WAITAOF, WATCH, XACK, XADD, XAUTOCLAIM, XCLAIM, XDEL, XGROUP, XINFO, XLEN, XPENDING, XRANGE, XREAD, XREADGROUP, XREVRANGE, XSETID, XTRIM, ZADD, ZCARD, ZCOUNT, ZDIFF, ZDIFFSTORE, ZINCRBY, ZINTER, ZINTERCARD, ZINTERSTORE, ZLEXCOUNT, ZMPOP, ZMSCORE, ZPOPMAX, ZPOPMIN, ZRANDMEMBER, ZRANGE, ZRANGEBYLEX, ZRANGEBYSCORE, ZRANGESTORE, ZRANK, ZREM, ZREMRANGEBYLEX, ZREMRANGEBYRANK, ZREMRANGEBYSCORE, ZREVRANGE, ZREVRANGEBYLEX, ZREVRANGEBYSCORE, ZREVRANK, ZSCAN, ZSCORE, ZUNION or ZUNIONSTORE}

valkey_fake_server down
