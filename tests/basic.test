package require tcltest
package require valkey

namespace import -force ::tcltest::test

::tcltest::configure {*}$argv

source [file join [file dirname [info script]] common.tcl]

valkey_fake_server up

test valkeyBasic-1.1.1 { Test basic connection using hostname } -body {
    set vkh [valkey -host localhost -port $::tcltest::vk_port]
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh
} -match glob -result {::valkey::handle0x*}

test valkeyBasic-1.1.2 { Test basic connection using ipv4 } -body {
    set vkh [valkey -host 127.0.0.1 -port $::tcltest::vk_port]
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh
} -match glob -result {::valkey::handle0x*}

test valkeyBasic-1.2 { Test error when connecting to not available service } -body {
    valkey -host 127.0.0.1 -port [expr { $::tcltest::vk_port + 1 }]
} -returnCodes error -result {failed to connect: Connection refused}

test valkeyBasic-1.3.1 { Test variable bound to valkey context } -body {
    set vkh [valkey -host 127.0.0.1 -port $::tcltest::vk_port -var foo]
    string equal $vkh $foo
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh foo
} -result 1

test valkeyBasic-1.3.2 { Test variable bound to valkey context, read-only } -body {
    set vkh [valkey -host 127.0.0.1 -port $::tcltest::vk_port -var foo]
    set foo "x"
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh foo
} -returnCodes error -result {can't set "foo": readonly variable}

test valkeyBasic-1.3.3 { Test variable bound to valkey context, writable when context is freed } -body {
    set vkh [valkey -host 127.0.0.1 -port $::tcltest::vk_port -var foo]
    $vkh destroy
    set foo "1"
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh foo
} -result 1

test valkeyBasic-1.3.4 { Test variable bound to valkey context, context commands are available via variable } -body {
    set vkh [valkey -host 127.0.0.1 -port $::tcltest::vk_port -var foo]
    $foo
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh foo
} -returnCodes error -match glob -result {wrong # args: should be "::valkey::handle0x* command ?subcommand? ?arg ...?"}

test valkeyBasic-1.3.5 { Test variable bound to valkey context, context commands are not available when context is freed } -body {
    set vkh [valkey -host 127.0.0.1 -port $::tcltest::vk_port -var foo]
    $vkh destroy
    $foo
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh foo
} -returnCodes error -match glob -result {invalid command name "::valkey::handle0x*"}

test valkeyBasic-1.3.6 { Test variable bound to valkey context, context freed when unset variable is unset } -body {
    set vkh [valkey -host 127.0.0.1 -port $::tcltest::vk_port -var foo]
    unset foo
    $vkh
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh foo
} -returnCodes error -match glob -result {invalid command name "::valkey::handle0x*"}

test valkeyBasic-1.3.7 { Test variable bound to valkey context, context freed when unset variable is unset from local procedure variables } -body {
    proc valkeyBasic137 {} {
        set vkh [valkey -host 127.0.0.1 -port $::tcltest::vk_port -var foo]
        return $vkh
    }
    set vkh [valkeyBasic137]
    $vkh
} -cleanup {
    catch { $vkh destroy }
    rename valkeyBasic137 ""
    unset -nocomplain vkh
} -returnCodes error -match glob -result {invalid command name "::valkey::handle0x*"}

test valkeyBasic-2.1 { Test error message for non-existing UNIX socket } -body {
    valkey -path non-existing-file
} -returnCodes error -match glob -result {failed to connect: No such file or directory}

test valkeyBasic-3.1 { Test wrong value for -retry_count } -body {
    set vkh [valkey -host localhost -port $::tcltest::vk_port -retry_count a]
} -cleanup {
    catch { $vkh destroy }
    unset -nocomplain vkh
} -returnCodes error -result {expected integer argument for "-retry_count" but got "a"}

test valkeyBasic-4.1 { Test pkgconfig list } -body {
    ::valkey::pkgconfig list
} -result {package-version feature-ssl}

test valkeyBasic-4.2 { Test pkgconfig get package-version } -body {
    ::valkey::pkgconfig get package-version
} -match glob -result "*.*.*"

test valkeyBasic-4.3.1 { Test pkgconfig get feature-ssl } -constraints { valkeyEnabledSsl } -body {
    ::valkey::pkgconfig get feature-ssl
} -result 1

test valkeyBasic-4.3.2 { Test pkgconfig get feature-ssl } -constraints { valkeyDisabledSsl } -body {
    ::valkey::pkgconfig get feature-ssl
} -result 0

valkey_fake_server down
